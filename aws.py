import logging
import boto3
from boto3.dynamodb.conditions import Key


class Aws:

    @staticmethod
    def aws_login():
        print("logging into aws")

    @staticmethod
    def get_items_from_dynamo_db_table(session_args, table_name, region_name, key_value, filter_value):
        """
        Function to fetch row(item) from a dynamo db table given the below params

        :param session_args: list of temporary access key, secret and role generated by STS/Assume Role Operation
        :param table_name: name of the table the query needs to be performed on
        :param region_name: region dynamoDB is located for ex: 'us-west-2'
        :param key_value: partition key field on the table
        :param filter_value: specific value on which the filtering/querying will be performed

        :return: item alias the record/row that is filtered based on the key/filter values passed in
        """

        # Create a boto session using session arguments/credentials
        session = boto3.session.Session(**session_args)
        # Create a resource
        dynamodb_resource = session.resource('dynamodb', region_name)

        # Creating the DynamoDB Table Resource
        table = dynamodb_resource.Table(table_name)

        response = table. \
            get_item(TableName=table_name,
                     Key={
                         key_value: filter_value  # 'fileId': '015744fe-0001-b1bb-e0b7-01751db7c5b5'
                     }
                     )

        return response.get('Item')

    @staticmethod
    def get_items_on_index_from_dynamo_db_table(session_args, table_name, region_name, index_name, key_value, filter_value):
        """
        Function to fetch row(item) from a dynamo db table based on a secondary index given the below params

        :param session_args: list of temporary access key, secret and role generated by STS/Assume Role Operation
        :param table_name: name of the table the query needs to be performed on
        :param region_name: region dynamoDB is located for ex: 'us-west-2'
        :param key_value: partition key field on the table
        :param filter_value: specific value on which the filtering/querying will be performed

        :return: item alias the record/row that is filtered based on the key/filter values passed in
        """

        # Create a boto session using session arguments/credentials
        session = boto3.session.Session(**session_args)
        # Create a resource
        dynamodb_resource = session.resource('dynamodb', region_name)

        # Creating the DynamoDB Table Resource
        table = dynamodb_resource.Table(table_name)

        response = table.query(IndexName=index_name, KeyConditionExpression=Key(key_value).eq(filter_value))

        return response.get('Items')

    @staticmethod
    def get_items_on_index_with_pagination_from_dynamo_db_table(session_args, table_name, region_name, index_name, key_value, filter_value):
        """
        Function to scan and fetch row(item) from a dynamo db table based on a secondary index given the below params

        :param session_args: list of temporary access key, secret and role generated by STS/Assume Role Operation
        :param table_name: name of the table the scan query needs to be performed on
        :param region_name: region dynamoDB is located for ex: 'us-west-2'
        :param index_name: name of the secondary index
        :param key_value: partition key field on the table
        :param filter_value: specific value on which the filtering/querying will be performed

        :return: item alias the record/row that is filtered based on the key/filter values passed in
        """

        # Create a boto session using session arguments/credentials
        session = boto3.session.Session(**session_args)
        # Create a resource
        dynamodb_client = session.client('dynamodb', region_name)

        items = []

        # first pass to get LastEvaluatedKey
        pages1 = dynamodb_client.scan(TableName=table_name,
                                                 IndexName=index_name,
                                                 ScanFilter={
                                                     key_value: {
                                                         "AttributeValueList": [{"S": filter_value}],
                                                         "ComparisonOperator": "CONTAINS"
                                                     }})
        if pages1['Count'] > 0:
            logging.debug('Found in 1st attempt')
            for i in pages1['Items']:
                items.append(i)

        if 'LastEvaluatedKey' in pages1:
            last_evaluated_key = pages1['LastEvaluatedKey']
            while True:
                # subsequent passes to find more items if dynamodb limit (1MB) exceeds
                pages2 = dynamodb_client.scan(TableName=table_name,
                                                         IndexName=index_name,
                                                         ScanFilter={
                                                             key_value: {
                                                                 "AttributeValueList": [{"S": filter_value}],
                                                                 "ComparisonOperator": "CONTAINS"
                                                             }},
                                                         ExclusiveStartKey=last_evaluated_key)

                if pages2['Count'] > 0:
                    for i in pages2['Items']:
                        items.append(i)

                if 'LastEvaluatedKey' not in pages2:
                    break
                last_evaluated_key = pages2['LastEvaluatedKey']

        return items

    @staticmethod
    def upload_file_to_s3_bucket(session_args, bucket_name, region_name, object_key, source_path):
        """
        Function to upload file to s3 bucket

        :param session_args: list of temporary access key, secret and role generated by STS/Assume Role Operation
        :param bucket_name: name of the s3 bucket file is to be uploaded into
        :param region_name: region s3 is located for ex: 'us-west-2'
        :param object_key: s3 object key for the file
        :param source_path: file path in local system for file being uploaded

        """
        session = boto3.session.Session(**session_args)
        s3_resource = session.resource('s3', region_name)
        try:
            s3_resource.Bucket(bucket_name).upload_file(source_path, object_key)
        except Exception as s3_write_exception:
            logging.error(str(s3_write_exception))

    @staticmethod
    def download_file_from_s3_bucket(session_args, bucket_name, region_name, object_key, destination_path):
        """
        Function to download file from s3 bucket

        :param session_args: list of temporary access key, secret and role generated by STS/Assume Role Operation
        :param bucket_name: name of the s3 bucket file is to be uploaded into
        :param region_name: region s3 is located for ex: 'us-west-2'
        :param object_key: s3 object key for the file
        :param destination_path: file path in local system for downloaded file

        """
        session = boto3.session.Session(**session_args)
        s3_resource = session.resource('s3', region_name)
        try:
            s3_resource.Bucket(bucket_name).download_file(object_key, destination_path)
        except Exception as s3_read_exception:
            logging.error(f"s3 read error {str(s3_read_exception)}")

    @staticmethod
    def assume_role(access_key_opt: object, access_secret_opt: object, access_role_opt: object) -> object:
        """
        Function to generate new temporary credentials using STS service based on params provided

        :param access_key_opt: CLI param for AWS access key provided to the fixture
        :param access_secret_opt: CLI param for AWS access secret provided to the fixture
        :param access_role_opt: CLI param for AWS Role provided to the fixture

        :return: temporary access key, secret key and session_token
        """
        sts_client = boto3.client('sts', aws_access_key_id=access_key_opt, aws_secret_access_key=access_secret_opt)
        # Assume the target role
        role_obj = sts_client.assume_role(RoleArn=access_role_opt, RoleSessionName='aws-access')
        credentials_temp = role_obj['Credentials']

        # Get temporary access key, secret key, session token from target role
        aws_access_key = credentials_temp['AccessKeyId']
        aws_secret_key = credentials_temp['SecretAccessKey']
        aws_session_token = credentials_temp['SessionToken']

        return aws_access_key, aws_secret_key, aws_session_token
